# -*- coding: utf-8 -*-
"""Dynamic_pricing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PS2W6HRmXMCLnIulP0TQ9ZTAavrFH0RB
"""

#importing library packages
import pickle
import joblib
import pandas as pd
import json
#from pandas import json_normalize

#for cheching if the datatype is string
from pandas.api.types import is_string_dtype

#installing haversine
!pip install haversine

#importing haversine function from haversine library
from haversine import haversine

#Creating reference to saved model file
filename = "gryd_model.pkl"

#loading csv file into pandas dataframe
data = pd.read_csv('Processed_Parking_Data.csv',index_col=0)

# Coordinates of centre of winnipeg
data['lon_win'] = -97.138451
data['lat_win'] = 49.895077

#Printing dataframe
data.head()

#Defining Haversine function to calculate distance between two quardinate points
from math import radians, cos, sin, asin, sqrt

def custom_haversine(k):
    """
    Calculate the great circle distance between two points 
    on the earth (specified in decimal degrees)
    """
    # convert decimal degrees to radians 
    k.Longitude, k.Latitude, k.lon_win, k.lat_win = map(radians, [k.Longitude, k.Latitude, k.lon_win, k.lat_win])

    # haversine formula 
    dlon = k.lon_win - k.Longitude  
    dlat = k.lat_win - k.Latitude  
    a = sin(dlat/2)**2 + cos(k.Latitude) * cos(k.lat_win) * sin(dlon/2)**2
    c = 2 * asin(sqrt(a))
    km = 6371 * c
    
    return km

#pinting column names
#Some of the columns in the list below are not expected by the model
data.columns

# Creating example string to test function

#Extract 4th row from dataframe
d = data.iloc[5]

#Converting pandas dataframe into JSON string
js = d.to_json(orient ='index')
print(js)

#converting dataframe to JSON dict
jd = json.loads(js)
print(jd)

#Dynamic price prediction function  
def dynamic_pricing(features):
  
  #Converting 1D Json dictionary into 2D Json dictionary
  features = {'0': features}

  #Converting 2D Json Dictionary into pandas dataframe
  data = pd.DataFrame.from_dict(features, orient = 'index')

  #Rename colummns
  data.columns  = ['Latitude','Longitude','Covered_Parking', 'Electric_charger' , 'Rating','Reserved_hours','Spot_Count','Daily_Rate','Evening_Rate','24/7','Commuter','Eveninng_and_Weekends']

  #Extracting desired features
  #these are the columns that are expected by the machine learning model for presiction
  data = data.loc[:, ['Latitude','Longitude','Covered_Parking', 'Electric_charger', 'Rating', 'Reserved_hours', 'Spot_Count', 'Daily_Rate', 'Evening_Rate', '24/7', 'Commuter', 'Eveninng_and_Weekends']]

  #Checking number of features
  if len(data.axes[1])!=12:
    print("ERROR: No suitable number of features for machine learning model.")

  # Coordinates of centre of winnipeg
  data['lon_win'] = -97.138451
  data['lat_win'] = 49.895077
  
  #Creating Feature to get distance of each parking spot from center of winnipeg
  data['Distance_from_center'] =data.apply(custom_haversine, axis = 1)

  #Validation
  if ('Covered_Parking' not in data) or data.Covered_Parking.isnull().any() or is_string_dtype(data['Covered_Parking']) or (data['Covered_Parking'][0]<0) or (data['Covered_Parking'][0]>1):
    data['Covered_Parking'] = 0

  if 'Electric_charger' not in data or data.Electric_charger.isnull().any() or is_string_dtype(data['Electric_charger']):
    data['Electric_charger'] = 0

  if 'Rating' not in data or data.Rating.isnull().any() or is_string_dtype(data['Rating']):
    data['Rating'] = 0

  if 'Reserved_hours' not in data or data.Reserved_hours.isnull().any() or is_string_dtype(data['Covered_Parking']):
    data['Reserved_hours'] = 0

  if 'Spot_Count' not in data or data.Spot_Count.isnull().any() or is_string_dtype(data['Spot_Count']):
    data['Spot_Count'] = 0

  if 'Daily_Rate' not in data or data.Daily_Rate.isnull().any() or is_string_dtype(data['Daily_Rate']):
    data['Daily_Rate'] = 0

  if 'Evening_Rate' not in data or data.Evening_Rate.isnull().any() or is_string_dtype(data['Evening_Rate']):
    data['Evening_Rate'] = 0

  if '24/7' not in data or data['24/7'].isnull().any() or is_string_dtype(data['24/7']):
    data['24/7'] = 0

  if 'Commuter' not in data or data.Commuter.isnull().any() or is_string_dtype(data['Commuter']):
    data['Commuter'] = 0

  if 'Eveninng_and_Weekends' not in data or data.Eveninng_and_Weekends.isnull().any() or is_string_dtype(data['Eveninng_and_Weekends']):
    data['Eveninng_and_Weekends'] = 0
 
  #Extracting desired features
  #these are the columns that are expected by the machine learning model for presiction
  data = data.loc[:, ['Covered_Parking', 'Electric_charger', 'Rating', 'Reserved_hours', 'Spot_Count', 'Daily_Rate', 'Evening_Rate', '24/7', 'Commuter', 'Eveninng_and_Weekends', 'Distance_from_center']]

  #Rename colummns
  #data.columns  = ['Covered_Parking', 'Electric_charger' , 'Rating','Reserved_hours','Spot_Count','Daily_Rate','Evening_Rate','24/7','Commuter','Eveninng_and_Weekends']
  
  #Loading the trained model
  loaded_model = joblib.load(filename)

  #extracting desired features for model
  #data = data[['Covered_Parking', 'Electric_charger', 'Rating', 'Reserved_hours', 'Spot_Count', 'Daily_Rate', 'Evening_Rate', '24/7', 'Commuter', 'Eveninng_and_Weekends', 'Distance_from_center']]
  
  #making predictions from trained model
  hourly = loaded_model.predict(data)

  #Hard-coding ratios
  daily_ratio = 4.8
  weekly_ratio = 4.8*5
  monthly_ratio = 4.8*25

  #Computing prices
  daily = daily_ratio * hourly
  weekly = weekly_ratio * hourly
  monthly = monthly_ratio * hourly

  #returning predicted 
  return(hourly,daily,weekly,monthly)

#calling the function to predict price
predicted_price = dynamic_pricing(jd)

#printing the predicted price
print(predicted_price)

